#+TITLE: Conforguration
#+AUTHOR: William Denton
#+EMAIL: wtd@pobox.com

#+PROPERTY: header-args :var script_dir="conforguration_scripts", dotfiles_dir="dotfiles"

This has my dotfiles and helper scripts to install Emacs, R and Ruby from source.  There may be more in the future.

If you're looking at this on GitHub, the BEGIN and END source block wrappers are hidden, so you can't see the parameters.  Look at the raw version of the file, or clone the repository and load it into Emacs, to read it properly.

* Initialize

Create =/usr/local/src/= and make it owned by oneself (on Debian-like systems, at least). This is where all source code will be downloaded and compiled.

#+BEGIN_SRC shell :tangle conforguration_scripts/initialize.sh :shebang "#!/bin/bash"
sudo mkdir -p /usr/local/src/
sudo chown $USER:$USER /usr/local/src
#+END_SRC

* Setup: Dotfiles

Dotfiles are stored in ~dotfiles/~ in raw form, not tangled in Org (perhaps this will come later).  The setup script, that symlinks everything, is also in there.

If you need some special environment variables on a machine, put them in ~.bash.$HOSTNAME.rc~, as described at the bottom of ~.bashrc~.  That's one way of setting up private environment variables that hold passwords or API tokens.

#+BEGIN_SRC shell :tangle dotfiles/dotfile-setup.sh :shebang "#!/bin/sh" :eval no
DOTFILES=".[a-zA-Z]*"
for DOTFILE in $DOTFILES; do
  rm -f ~/${DOTFILE}
  ln -s ~/$dotfiles_dir/${DOTFILE} ~/${DOTFILE}
done
rm ~/.profile
ln -s ~/.bash_profile ~/.profile
#+END_SRC

#+RESULTS:

#+BEGIN_SRC shell :results output
ls -al $dotfiles_dir
#+END_SRC

#+RESULTS:
#+begin_example
total 268
drwxr-xr-x 2 wtd wtd  4096 Dec  1 21:30 .
drwxr-xr-x 5 wtd wtd  4096 Dec  1 21:33 ..
-rw-r--r-- 1 wtd wtd   121 May 30  2016 .bash_logout
-rw-r--r-- 1 wtd wtd    42 May 28  2016 .bash_profile
-rw-r--r-- 1 wtd wtd  6002 Nov 29 19:41 .bashrc
-rw-r--r-- 1 wtd wtd 10242 Oct 18 14:39 .dircolors.ansi-dark
-rwxr-xr-x 1 wtd wtd   242 Dec  1 21:30 dotfile-setup.sh
-rw-r--r-- 1 wtd wtd   118 May  9  2016 .gemrc
-rw-r--r-- 1 wtd wtd 57491 Oct 18 14:39 .git-completion.bash
-rw-r--r-- 1 wtd wtd   424 May 12  2016 .gitconfig
-rw-r--r-- 1 wtd wtd 14374 Oct 18 14:39 .lynxrc
-rw-r--r-- 1 wtd wtd    71 May 11  2016 .nanorc
-rw-r--r-- 1 wtd wtd   818 May 11  2016 .Rprofile
-rw-r--r-- 1 wtd wtd   112 Oct 13 18:00 .rubocop.yml
-rw------- 1 wtd wtd    84 May 27  2016 .signature
-rw-r--r-- 1 wtd wtd   227 Nov 29 19:41 .signature.work
-rw-r--r-- 1 wtd wtd  1332 May 11  2016 .tmux.conf
#+end_example

* Setup: Emacs

** Requirements

#+BEGIN_SRC shell :tangle conforguration_scripts/emacs-install-requirements.sh :shebang "#!/bin/bash"
sudo apt-get build-dep emacs24
#+END_SRC

** Installation

First get the source for Emacs and compile it, then get the source for Org and compile it.

#+BEGIN_SRC shell :tangle conforguration_scripts/emacs-install-from-source.sh :shebang "#!/bin/bash"
cd /usr/local/src/
# Emacs
git clone git://git.savannah.gnu.org/emacs.git
cd emacs
./autogen.sh
./configure
make
# Org
cd /usr/local/src/
git clone git://orgmode.org/org-mode.git
cd org-mode
make
# My config
cd
git clone git@github.com:wdenton/.emacs.d.git
echo "Now run emacs, and say no when asked about a location for abbref_defs."
#+END_SRC

Running =emacs= the first time will download and install all the packages needed, but some setting about =abbrevs= is misordered so it will ask a question it doesn't need to ask.  Saying no makes everything work.

It's probably best to quit Emacs and restart after this, but you don't actually need to.

* Setup: R

** Requirements

PATH needs to include ~/usr/local/src/R~, but my ~bashrc~ has that configured already.

The first line of requirements may be needed for R 3.3.  The ~topicmodels~ package requires the GNU Scientific Library.  Once done, this doesn't need to be run again.  Sync and run the script on machines as necessary.

#+BEGIN_SRC shell :tangle conforguration_scripts/r-install-requirements.sh :shebang "#!/bin/bash"
sudo apt-get install libbz2-dev liblzma-dev libxml2-dev libpcre3-dev fonts-inconsolata
sudo apt-get install xorg-dev gfortran libreadline-dev libcurl4-openssl-dev libssl-dev
sudo apt-get build-dep r-base
sudo apt-get install libgsl-dev
mkdir -p ~/R/history/
sudo mkdir -p /usr/local/src/R
#+END_SRC

** Installation

Change the version number as needed.

#+NAME: R_VERSION
| 3.4.3 |

#+BEGIN_SRC shell :tangle conforguration_scripts/r-install-from-source.sh :shebang "#!/bin/bash" :var R_VERSION=R_VERSION
cd /usr/local/src/R

# Wipe this version if it is there already (just in case)
rm -rf R-$R_VERSION.tar.gz R-$R_VERSION

# Download and uncompress
curl -O https://cran.hafro.is/src/base/R-3/R-$R_VERSION.tar.gz
tar xzvf R-$R_VERSION.tar.gz

# Compile
cd R-$R_VERSION
./configure
make && make check

# Set up aliases
cd ..
rm R Rscript
ln -s R-$R_VERSION/bin/R R
ln -s R-$R_VERSION/bin/Rscript Rscript

# Install all the packages I want available by default
PACKAGE_LIST="tidyverse readxl devtools RCurl roxygen2 testthat lubridate shiny flexdashboard knitr ggvis seriation igraph arules arulesViz tm wordcloud cluster fpc topicmodels"
for PKG in $PACKAGE_LIST; do ./Rscript --vanilla -e "install.packages('$PKG', repos=c('https://cran.hafro.is/'))"; done
./Rscript --vanilla -e "devtools::install_github('yorkulibraries/yulr')"
./Rscript --vanilla -e "devtools::install_github('tidyverse/hms')"
#+END_SRC

* Setup: Ruby (with rbenv)

** Requirements

#+BEGIN_SRC shell :tangle conforguration_scripts/rbenv-install-requirements.sh :shebang "#!/bin/bash"
sudo apt-get build-dep ruby
#+END_SRC

** Installation

Change the version number as needed.

TODO: Don't delete =rbenv=, skip cloning it if it's already there.

#+NAME: RUBY_VERSION
| 2.5.0 |

#+BEGIN_SRC shell :tangle conforguration_scripts/rbenv-install-from-source.sh :shebang "#!/bin/bash" :var RUBY_VERSION=RUBY_VERSION
rm -rf ~/.rbenv/
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
source ~/.bashrc
rbenv install --verbose $RUBY_VERSION
rbenv global $RUBY_VERSION
gem install marc nokogiri sqlite3 rubocop backup bundler jekyll t
echo "Now run bundler install where needed."
#+END_SRC

* Machines

** localhost

*** Dotfiles

#+BEGIN_SRC shell :results output
cp -r dotfiles ~/
cd ~/dotfiles/
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

** music

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ music:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /scp:wtd@music:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

** pair

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ pair:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /pair:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

** shell

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ shell:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /scp:wtd@shell:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

** ares

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ ares:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /ares:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

*** Synchronize install scripts

#+BEGIN_SRC shell :results silent
rsync -avz --times $script_dir/ ares:$script_dir/
#+END_SRC

*** Install

#+BEGIN_SRC shell :dir /ares:conforguration_scripts/ :results silent
./r-install-from-source.sh
#+END_SRC

** vm1

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ vm1:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /scp:wdenton@vm1:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

*** Synchronize install scripts

#+BEGIN_SRC shell :results silent
rsync -avz --times $script_dir/ vm1:$script_dir/
#+END_SRC

*** Install

#+BEGIN_SRC shell :dir /vm1:conforguration_scripts/ :results silent
./r-install-from-source.sh
#+END_SRC

#+RESULTS:

** wdenton

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ wdenton:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /scp:wdenton@wdenton:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

*** Synchronize install scripts

#+BEGIN_SRC shell :results silent
rsync -avz --times $script_dir/ wdenton:$script_dir/
#+END_SRC

*** Install

#+BEGIN_SRC shell :dir /scp:wdenton@wdenton:conforguration_scripts/ :results silent
./r-install-from-source.sh
#+END_SRC

#+RESULTS:

** orez

*** Dotfiles

#+BEGIN_SRC shell :results silent
rsync -avz --times $dotfiles_dir/ orez:$dotfiles_dir/
#+END_SRC

#+BEGIN_SRC shell :dir /scp:wdenton@orez:dotfiles/ :results output
./dotfile-setup.sh
#+END_SRC

#+RESULTS:

*** Synchronize install scripts

#+BEGIN_SRC shell :results silent
rsync -avz --times $script_dir/ orez:$script_dir/
#+END_SRC

*** Install

#+BEGIN_SRC shell :dir /orez:conforguration_scripts/ :results silent
./r-install-requirements.sh
./r-install-from-source.sh
./rbenv-install-requirements.sh
./rbenv-install-from-source.sh
#+END_SRC

#+RESULTS:
